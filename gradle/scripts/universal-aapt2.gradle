// Universal AAPT2 Configuration Script
// Automatically detects architecture and configures appropriate AAPT2 binary
// This script runs during Gradle configuration phase

def detectArchitecture() {
    def arch = System.getProperty("os.arch")
    def osName = System.getProperty("os.name").toLowerCase()
    
    println "🔍 Detecting architecture: $arch on $osName"
    
    // Map various architecture names to android-tools naming
    def archMapping = [
        'amd64': 'x86_64',
        'x86_64': 'x86_64', 
        'aarch64': 'arm64-v8a',
        'arm64': 'arm64-v8a',
        'armv7l': 'armeabi-v7a',
        'armhf': 'armeabi-v7a',
        'i386': 'x86',
        'i686': 'x86'
    ]
    
    def mappedArch = archMapping[arch] ?: 'unknown'
    println "📋 Mapped architecture: $arch -> $mappedArch"
    
    return [
        raw: arch,
        mapped: mappedArch,
        needsOverride: mappedArch in ['arm64-v8a', 'armeabi-v7a', 'x86']
    ]
}

def setupAapt2ForArchitecture(archInfo) {
    if (!archInfo.needsOverride) {
        println "✅ Standard SDK AAPT2 sufficient for ${archInfo.raw}"
        return
    }
    
    println "🌍 Setting up universal AAPT2 for ${archInfo.mapped}..."
    
    // Enhanced architecture detection and android-tools integration
    def androidToolsDir = new File("/tmp/android-tools")
    def aapt2Path = new File("/opt/android-tools/aapt2")
    
    // Use the cloned android-tools repository (CleverFerret approach)
    if (androidToolsDir.exists()) {
        // Try multiple Android versions (best to oldest)
        def androidVersions = ["android-11.0.0_r33", "android-9.0.0_r33"]
        def selectedVersion = null
        def sourceAapt2 = null
        
        for (version in androidVersions) {
            def versionDir = new File(androidToolsDir, "build/$version")
            if (versionDir.exists()) {
                sourceAapt2 = new File(versionDir, "aapt2/${archInfo.mapped}/bin/aapt2")
                if (sourceAapt2.exists()) {
                    selectedVersion = version
                    break
                }
            }
        }
        
        if (sourceAapt2?.exists()) {
            println "✅ Found android-tools AAPT2: ${sourceAapt2.absolutePath} ($selectedVersion)"
            
            // Setup tools directory  
            def toolsDir = new File("/opt/android-tools")
            toolsDir.mkdirs()
            
            // Copy the binary (CleverFerret method)
            sourceAapt2.withInputStream { input ->
                aapt2Path.withOutputStream { output ->
                    output << input
                }
            }
            
            // Make executable
            aapt2Path.setExecutable(true)
            
            // Test the binary with enhanced compatibility check
            try {
                def proc = "${aapt2Path.absolutePath} version".execute()
                proc.waitFor()
                if (proc.exitValue() == 0) {
                    def versionOutput = proc.text.trim()
                    println "✅ Android-tools AAPT2 working: $versionOutput"
                    
                    // Universal compatibility layer
                    setupUniversalCompatibilityLayer(aapt2Path.absolutePath, selectedVersion, archInfo)
                } else {
                    println "❌ AAPT2 version test failed"
                    setupFallbackAapt2()
                }
            } catch (Exception e) {
                println "⚠️  AAPT2 test failed: ${e.message}"
                setupFallbackAapt2()
            }
        } else {
            println "❌ No compatible android-tools AAPT2 found for ${archInfo.mapped}"
            // Try fallback architectures
            def fallbackArchs = ["x86_64", "arm64-v8a", "armeabi-v7a", "x86"]
            for (fallbackArch in fallbackArchs) {
                if (fallbackArch != archInfo.mapped) {
                    for (version in androidVersions) {
                        def fallbackAapt2 = new File(androidToolsDir, "build/$version/aapt2/$fallbackArch/bin/aapt2")
                        if (fallbackAapt2.exists()) {
                            println "🔄 Using fallback AAPT2: $fallbackArch from $version"
                            // Copy fallback binary
                            fallbackAapt2.withInputStream { input ->
                                aapt2Path.withOutputStream { output ->
                                    output << input
                                }
                            }
                            aapt2Path.setExecutable(true)
                            setupUniversalCompatibilityLayer(aapt2Path.absolutePath, version, archInfo)
                            return
                        }
                    }
                }
            }
            setupFallbackAapt2()
        }
    } else {
        println "❌ Android-tools repository not found, using fallback"
        setupFallbackAapt2()
    }
}

def setupUniversalCompatibilityLayer(aapt2Path, version, archInfo) {
    println "🔧 Setting up universal compatibility layer..."
    
    // Create architecture-specific configuration
    def configFile = new File(project.rootDir, "gradle-universal-config.properties")
    configFile.text = """
# Universal Android Tools Configuration
# Generated: ${new Date()}
# Architecture: ${archInfo.raw} -> ${archInfo.mapped}
# Android Version: $version

android.tools.aapt2.path=$aapt2Path
android.tools.aapt2.arch=${archInfo.mapped}
android.tools.aapt2.version=$version
android.tools.aapt2.compatible=true

# Universal build optimizations
org.gradle.parallel=true
org.gradle.caching=true
android.useAndroidX=true
android.enableJetifier=true
"""
    
    // Let AGP handle AAPT2 internally with our enhanced environment
    println "📋 Using AGP's internal AAPT2 with universal compatibility layer"
    
    // Set system properties for build optimization
    System.setProperty("android.tools.universal.arch", archInfo.mapped)
    System.setProperty("android.tools.universal.available", "true")
}

def setupCompatibilityLayer() {
    println "🔧 Setting up runtime compatibility layer for android-tools AAPT2"
    
    // Instead of overriding AAPT2, we'll let AGP use its internal binary
    // but set up the environment for better cross-architecture support
    
    def androidHome = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
    if (androidHome) {
        println "✅ Android SDK available at: $androidHome"
        
        // Configure for better cross-architecture compatibility
        System.setProperty("android.builder.sdkDownload", "false")
        
        // Use the build tools that come with the SDK
        println "📋 Using standard Android SDK build tools with runtime optimization"
    }
}

def setupFallbackAapt2() {
    println "🔄 Setting up fallback AAPT2..."
    
    def androidHome = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
    if (!androidHome) {
        println "❌ No Android SDK found"
        return
    }
    
    def sdkAapt2 = new File("$androidHome/build-tools/35.0.0/aapt2")
    if (!sdkAapt2.exists()) {
        sdkAapt2 = new File("$androidHome/build-tools/34.0.0/aapt2")
    }
    
    if (sdkAapt2.exists()) {
        def fallbackPath = new File("/opt/android-tools/aapt2")
        fallbackPath.parentFile.mkdirs()
        
        // Copy SDK AAPT2 as fallback
        sdkAapt2.withInputStream { input ->
            fallbackPath.withOutputStream { output ->
                output << input
            }
        }
        
        fallbackPath.setExecutable(true)
        println "📋 Fallback AAPT2 configured from Android SDK"
        project.ext.customAapt2Path = fallbackPath.absolutePath
    } else {
        println "❌ No fallback AAPT2 available"
    }
}

def configureGradleProperties() {
    if (project.hasProperty('customAapt2Path')) {
        def aapt2Path = project.ext.customAapt2Path
        println "⚙️  Configuring Gradle to use: $aapt2Path"
        
        // Set the property for this build
        project.ext.setProperty('android.aapt2FromMavenOverride', aapt2Path)
        
        // Also set as system property for this session
        System.setProperty('android.aapt2FromMavenOverride', aapt2Path)
        
        println "✅ AAPT2 override configured"
    }
}

// Main execution during configuration phase
println "🌍 Universal AAPT2 Setup for Linkpoint"

def archInfo = detectArchitecture()
setupAapt2ForArchitecture(archInfo)
configureGradleProperties()

println "🎯 Universal AAPT2 configuration complete"