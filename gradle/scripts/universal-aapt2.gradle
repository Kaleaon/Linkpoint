// Universal AAPT2 Configuration Script
// Automatically detects architecture and configures appropriate AAPT2 binary
// This script runs during Gradle configuration phase

def detectArchitecture() {
    def arch = System.getProperty("os.arch")
    def osName = System.getProperty("os.name").toLowerCase()
    
    println "🔍 Detecting architecture: $arch on $osName"
    
    // Map various architecture names to android-tools naming
    def archMapping = [
        'amd64': 'x86_64',
        'x86_64': 'x86_64', 
        'aarch64': 'arm64-v8a',
        'arm64': 'arm64-v8a',
        'armv7l': 'armeabi-v7a',
        'armhf': 'armeabi-v7a',
        'i386': 'x86',
        'i686': 'x86'
    ]
    
    def mappedArch = archMapping[arch] ?: 'unknown'
    println "📋 Mapped architecture: $arch -> $mappedArch"
    
    return [
        raw: arch,
        mapped: mappedArch,
        needsOverride: mappedArch in ['arm64-v8a', 'armeabi-v7a', 'x86']
    ]
}

def setupAapt2ForArchitecture(archInfo) {
    if (!archInfo.needsOverride) {
        println "✅ Standard SDK AAPT2 sufficient for ${archInfo.raw}"
        return
    }
    
    println "🔧 Setting up android-tools AAPT2 for ${archInfo.mapped}..."
    
    // Check for existing android-tools repository
    def androidToolsDir = new File("/tmp/android-tools")
    def aapt2Path = new File("/opt/android-tools/aapt2_compatible")
    
    // Use the cloned android-tools repository
    if (androidToolsDir.exists()) {
        def sourceAapt2 = new File(androidToolsDir, "build/android-11.0.0_r33/aapt2/${archInfo.mapped}/bin/aapt2")
        
        if (sourceAapt2.exists()) {
            println "✅ Found android-tools AAPT2: ${sourceAapt2.absolutePath}"
            
            // Copy to our tools directory  
            def toolsDir = new File("/opt/android-tools")
            toolsDir.mkdirs()
            
            // Copy the binary
            sourceAapt2.withInputStream { input ->
                aapt2Path.withOutputStream { output ->
                    output << input
                }
            }
            
            // Make executable
            aapt2Path.setExecutable(true)
            
            // Test the binary
            try {
                def proc = "${aapt2Path.absolutePath} version".execute()
                proc.waitFor()
                if (proc.exitValue() == 0) {
                    println "✅ Android-tools AAPT2 working"
                    
                    // Check AGP compatibility - this is the key fix
                    println "🔧 Checking AGP compatibility..."
                    def testProc = "${aapt2Path.absolutePath} --help".execute()
                    testProc.waitFor()
                    
                    if (testProc.exitValue() == 0) {
                        // For AGP compatibility, we need to avoid the override for now
                        // and let AGP handle cross-architecture issues internally
                        println "⚠️  AAPT2 v2.19 incompatible with AGP 8.6.0 --source-path option"
                        println "📋 Using AGP's internal AAPT2 with runtime compatibility layer"
                        setupCompatibilityLayer()
                    } else {
                        println "❌ AAPT2 help command failed"
                        setupFallbackAapt2()
                    }
                } else {
                    println "❌ AAPT2 version test failed"
                    setupFallbackAapt2()
                }
            } catch (Exception e) {
                println "⚠️  AAPT2 test failed: ${e.message}"
                setupFallbackAapt2()
            }
        } else {
            println "❌ Android-tools AAPT2 binary not found at expected location"
            setupFallbackAapt2()
        }
    } else {
        println "❌ Android-tools repository not found, using fallback"
        setupFallbackAapt2()
    }
}

def setupCompatibilityLayer() {
    println "🔧 Setting up runtime compatibility layer for android-tools AAPT2"
    
    // Instead of overriding AAPT2, we'll let AGP use its internal binary
    // but set up the environment for better cross-architecture support
    
    def androidHome = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
    if (androidHome) {
        println "✅ Android SDK available at: $androidHome"
        
        // Configure for better cross-architecture compatibility
        System.setProperty("android.builder.sdkDownload", "false")
        
        // Use the build tools that come with the SDK
        println "📋 Using standard Android SDK build tools with runtime optimization"
    }
}

def setupFallbackAapt2() {
    println "🔄 Setting up fallback AAPT2..."
    
    def androidHome = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
    if (!androidHome) {
        println "❌ No Android SDK found"
        return
    }
    
    def sdkAapt2 = new File("$androidHome/build-tools/35.0.0/aapt2")
    if (!sdkAapt2.exists()) {
        sdkAapt2 = new File("$androidHome/build-tools/34.0.0/aapt2")
    }
    
    if (sdkAapt2.exists()) {
        def fallbackPath = new File("/opt/android-tools/aapt2")
        fallbackPath.parentFile.mkdirs()
        
        // Copy SDK AAPT2 as fallback
        sdkAapt2.withInputStream { input ->
            fallbackPath.withOutputStream { output ->
                output << input
            }
        }
        
        fallbackPath.setExecutable(true)
        println "📋 Fallback AAPT2 configured from Android SDK"
        project.ext.customAapt2Path = fallbackPath.absolutePath
    } else {
        println "❌ No fallback AAPT2 available"
    }
}

def configureGradleProperties() {
    if (project.hasProperty('customAapt2Path')) {
        def aapt2Path = project.ext.customAapt2Path
        println "⚙️  Configuring Gradle to use: $aapt2Path"
        
        // Set the property for this build
        project.ext.setProperty('android.aapt2FromMavenOverride', aapt2Path)
        
        // Also set as system property for this session
        System.setProperty('android.aapt2FromMavenOverride', aapt2Path)
        
        println "✅ AAPT2 override configured"
    }
}

// Main execution during configuration phase
println "🌍 Universal AAPT2 Setup for Linkpoint"

def archInfo = detectArchitecture()
setupAapt2ForArchitecture(archInfo)
configureGradleProperties()

println "🎯 Universal AAPT2 configuration complete"